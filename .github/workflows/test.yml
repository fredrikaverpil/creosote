name: test

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  pytest:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: cpython_setup
        with:
          python-version: ${{ matrix.python-version }}

      - run: pipx install poetry --python '${{ steps.cpython_setup.outputs.python-path }}'

      - uses: actions/cache@v3
        id: cache-poetry-test
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MIN: "15"
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: pip-poetry-${{ runner.os }}-${{ runner.arch }}-py-${{ steps.cpython_setup.outputs.python-version }}

      - name: pytest (linux/macos)
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV: $VIRTUAL_ENV"
          pip install --upgrade pip
          pip install '.[test]'
          pytest -s -vv

      - name: pytest (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          python -m venv .venv
          .venv/Scripts/Activate.ps1
          echo "VIRTUAL_ENV: $VIRTUAL_ENV"
          python -m pip install --upgrade pip
          pip install '.[test]'
          pytest -s -vv

  action:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: cpython_setup
        with:
          python-version: ${{ matrix.python-version }}

      - run: pipx install creosote --python '${{ steps.cpython_setup.outputs.python-path }}'

      - name: run creosote (linux/macos)
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV: $VIRTUAL_ENV"
          pip install .
          creosote --venv .venv

      - name: run creosote (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          python -m venv .venv
          .venv/Scripts/Activate.ps1
          Write-Host "VIRTUAL_ENV: $env:VIRTUAL_ENV"
          pip install .
          creosote --venv .venv
